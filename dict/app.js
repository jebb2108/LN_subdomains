// DOM references (initialized on DOMContentLoaded)
let userIdElement;
let wordsListElement;
let notificationElement;
let loadingOverlay;
let wordsLoading;

// state
let currentUserId = null;

// API base ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º origin —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ CORS –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ —Ç–æ–º –∂–µ —Ö–æ—Å—Ç–µ)
const API_BASE_URL = window.location.origin || 'https://dict.lllang.site';

// --- Init ---
document.addEventListener('DOMContentLoaded', () => {
    userIdElement = document.getElementById('userId');
    wordsListElement = document.getElementById('wordsList');
    notificationElement = document.getElementById('notification');
    loadingOverlay = document.getElementById('loadingOverlay');
    wordsLoading = document.getElementById('wordsLoading');

    // üîÑ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –° –ò–ó–í–õ–ï–ß–ï–ù–ò–ï–ú –ò–ó URL
    function initializeFromURL() {
        console.log('üîÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ URL...');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ hash
            const hashParams = new URLSearchParams(window.location.hash.substring(1));
            const tgWebAppData = hashParams.get('tgWebAppData');
            
            if (tgWebAppData) {
                console.log('‚úÖ tgWebAppData –Ω–∞–π–¥–µ–Ω –≤ URL');
                
                // –ü–∞—Ä—Å–∏–º tgWebAppData
                const dataParams = new URLSearchParams(tgWebAppData);
                const userParam = dataParams.get('user');
                
                if (userParam) {
                    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –ø–∞—Ä—Å–∏–º JSON —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    const decodedUser = decodeURIComponent(userParam);
                    const userData = JSON.parse(decodedUser);
                    
                    console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL:', userData);
                    
                    if (userData && userData.id) {
                        const userId = String(userData.id);
                        console.log('‚úÖ USER ID –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ URL:', userId);
                        return userId;
                    }
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ URL:', error);
        }
        
        return null;
    }

    // üîÑ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò TELEGRAM WEBAPP –° FALLBACK
    function loadTelegramWebApp() {
        return new Promise((resolve) => {
            // –ï—Å–ª–∏ Telegram —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (window.Telegram?.WebApp) {
                console.log('‚úÖ Telegram WebApp —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
                const tg = window.Telegram.WebApp;
                tg.ready();
                tg.expand();
                
                if (tg.initDataUnsafe?.user?.id) {
                    resolve(String(tg.initDataUnsafe.user.id));
                    return;
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Telegram WebApp —Å–∫—Ä–∏–ø—Ç–∞...');
            const script = document.createElement('script');
            script.src = 'https://telegram.org/js/telegram-web-app.js';
            script.onload = () => {
                console.log('‚úÖ Telegram WebApp —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
                if (window.Telegram?.WebApp) {
                    const tg = window.Telegram.WebApp;
                    tg.ready();
                    tg.expand();
                    
                    if (tg.initDataUnsafe?.user?.id) {
                        resolve(String(tg.initDataUnsafe.user.id));
                    } else {
                        resolve(null);
                    }
                } else {
                    resolve(null);
                }
            };
            script.onerror = () => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Telegram WebApp —Å–∫—Ä–∏–ø—Ç–∞');
                resolve(null);
            };
            document.head.appendChild(script);
            
            // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
            setTimeout(() => {
                resolve(null);
            }, 2000);
        });
    }

    // üîÑ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
    async function initializeApp() {
        let userId = null;
        
        // 1. –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å Telegram WebApp
        userId = await loadTelegramWebApp();
        
        // 2. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ URL
        if (!userId) {
            userId = initializeFromURL();
        }
        
        // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user_id
        if (userId) {
            currentUserId = userId;
            if (userIdElement) {
                userIdElement.textContent = currentUserId;
                userIdElement.style.color = 'rgba(255, 255, 255, 1)';
            }
            
            console.log('üéâ USER ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', currentUserId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º URL
            updateUrlWithUserId(currentUserId);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            loadWords();
            loadStatistics();
        } else {
            // 4. –ï—Å–ª–∏ user_id –Ω–µ –Ω–∞–π–¥–µ–Ω
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id');
            showNotification('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
            if (userIdElement) {
                userIdElement.textContent = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
                userIdElement.style.color = 'red';
            }
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        setupEventListeners();
    }

    // üîÑ –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø URL
    function updateUrlWithUserId(userId) {
        try {
            const url = new URL(window.location);
            url.searchParams.set('user_id', userId);
            window.history.replaceState({}, '', url);
            console.log('üîó URL –æ–±–Ω–æ–≤–ª–µ–Ω:', url.toString());
        } catch (e) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å URL:', e);
        }
    }

    // üîÑ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–ê–°–¢–†–û–ô–ö–ò –û–°–¢–ê–õ–¨–ù–´–• –°–õ–£–®–ê–¢–ï–õ–ï–ô –°–û–ë–´–¢–ò–ô
    function setupEventListeners() {
        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if (wordsListElement) {
            wordsListElement.addEventListener('click', (event) => {
                const btn = event.target.closest('.delete-btn');
                if (!btn) return;
                const wordId = btn.getAttribute('data-id');
                deleteWord(wordId);
            });
        }

        setupBookmarks();

        document.getElementById('addWordBtn')?.addEventListener('click', addWord);
        document.getElementById('searchBtn')?.addEventListener('click', findTranslation);
        document.getElementById('refreshWordsBtn')?.addEventListener('click', loadWords);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    initializeApp();
});

// --- Navigation bookmarks with improved carousel animation ---
function setupBookmarks() {
    const bookmarks = document.querySelectorAll('.bookmark');
    const sidebar = document.querySelector('.bookmarks-sidebar');
    
    bookmarks.forEach(bookmark => {
        bookmark.addEventListener('click', function() {
            // –ï—Å–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if (this.classList.contains('active')) return;
            
            const clickedBookmark = this;
            const allBookmarks = Array.from(sidebar.children);
            const clickedIndex = allBookmarks.indexOf(clickedBookmark);
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É –≤—Å–µ—Ö
            bookmarks.forEach(b => b.classList.remove('active'));
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π
            this.classList.add('active');

            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
            const pageId = this.getAttribute('data-page');
            const pageElement = document.getElementById(pageId);
            if (pageElement) pageElement.classList.add('active');

            if (pageId === 'all-words') loadWords();
            if (pageId === 'statistics') loadStatistics();
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—É—Å–µ–ª–∏ —Å —É—á–µ—Ç–æ–º –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            animateBookmarkCarousel(clickedBookmark, clickedIndex, allBookmarks, sidebar);
        });
    });
}

function animateBookmarkCarousel(clickedBookmark, clickedIndex, allBookmarks, sidebar) {
    const isMobile = window.innerWidth <= 768;
    
    if (isMobile) {
        // –ú–æ–±–∏–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–ª–µ–≤–æ
        animateMobileCarousel(clickedBookmark, clickedIndex, allBookmarks, sidebar);
    } else {
        // –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
        animateDesktopCarousel(clickedBookmark, clickedIndex, allBookmarks, sidebar);
    }
}

function animateDesktopCarousel(clickedBookmark, clickedIndex, allBookmarks, sidebar) {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫: –≤—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏ –≤—ã—à–µ –∫–ª–∏–∫–Ω—É—Ç–æ–π –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü
    const bookmarksAbove = allBookmarks.slice(0, clickedIndex);
    const bookmarksBelow = allBookmarks.slice(clickedIndex + 1);
    
    // –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫: –∫–ª–∏–∫–Ω—É—Ç–∞—è –∑–∞–∫–ª–∞–¥–∫–∞ + –≤—Å–µ –Ω–∏–∂–µ + –≤—Å–µ –≤—ã—à–µ
    const newOrder = [clickedBookmark, ...bookmarksBelow, ...bookmarksAbove];
    
    // –ê–Ω–∏–º–∞—Ü–∏—è: —Å–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏ –≤—ã—à–µ –∫–ª–∏–∫–Ω—É—Ç–æ–π
    bookmarksAbove.forEach((bookmark, index) => {
        bookmark.style.transition = `transform 0.4s ease ${index * 0.05}s, opacity 0.4s ease ${index * 0.05}s`;
        bookmark.style.transform = 'translateY(-20px)';
        bookmark.style.opacity = '0';
    });
    
    // –ê–Ω–∏–º–∏—Ä—É–µ–º —Å–¥–≤–∏–≥ –∑–∞–∫–ª–∞–¥–æ–∫ –Ω–∏–∂–µ –≤–≤–µ—Ä—Ö
    bookmarksBelow.forEach((bookmark, index) => {
        bookmark.style.transition = `transform 0.4s ease ${(bookmarksAbove.length + index) * 0.05}s`;
        bookmark.style.transform = `translateY(-${clickedBookmark.offsetHeight}px)`;
    });
    
    // –ê–Ω–∏–º–∏—Ä—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—É—é –∑–∞–∫–ª–∞–¥–∫—É –Ω–∞–≤–µ—Ä—Ö
    clickedBookmark.style.transition = `transform 0.4s ease ${bookmarksAbove.length * 0.05}s`;
    clickedBookmark.style.transform = `translateY(-${clickedIndex * clickedBookmark.offsetHeight}px)`;
    
    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º DOM –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏
    setTimeout(() => {
        // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º DOM –≤ –Ω–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ
        sidebar.innerHTML = '';
        newOrder.forEach(bookmark => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
            bookmark.style.transition = '';
            bookmark.style.transform = '';
            bookmark.style.opacity = '';
            sidebar.appendChild(bookmark);
        });
    }, 400 + Math.max(bookmarksAbove.length, bookmarksBelow.length) * 50);
}

function animateMobileCarousel(clickedBookmark, clickedIndex, allBookmarks, sidebar) {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫: –≤—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏ —Å–ª–µ–≤–∞ –æ—Ç –∫–ª–∏–∫–Ω—É—Ç–æ–π –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü
    const bookmarksLeft = allBookmarks.slice(0, clickedIndex);
    const bookmarksRight = allBookmarks.slice(clickedIndex + 1);
    
    // –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫: –∫–ª–∏–∫–Ω—É—Ç–∞—è –∑–∞–∫–ª–∞–¥–∫–∞ + –≤—Å–µ —Å–ø—Ä–∞–≤–∞ + –≤—Å–µ —Å–ª–µ–≤–∞
    const newOrder = [clickedBookmark, ...bookmarksRight, ...bookmarksLeft];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —à–∏—Ä–∏–Ω—É —Å–∞–π–¥–±–∞—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    const sidebarWidth = sidebar.offsetWidth;
    sidebar.style.minWidth = `${sidebarWidth}px`;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è: —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏ —Å–ª–µ–≤–∞ –æ—Ç –∫–ª–∏–∫–Ω—É—Ç–æ–π
    bookmarksLeft.forEach((bookmark, index) => {
        bookmark.style.transition = `transform 0.4s ease ${index * 0.05}s, opacity 0.4s ease ${index * 0.05}s`;
        bookmark.style.transform = `translateX(-${bookmark.offsetWidth}px)`;
        bookmark.style.opacity = '0';
    });
    
    // –ê–Ω–∏–º–∏—Ä—É–µ–º —Å–¥–≤–∏–≥ –∑–∞–∫–ª–∞–¥–æ–∫ —Å–ø—Ä–∞–≤–∞ –≤–ª–µ–≤–æ
    bookmarksRight.forEach((bookmark, index) => {
        bookmark.style.transition = `transform 0.4s ease ${(bookmarksLeft.length + index) * 0.05}s`;
        bookmark.style.transform = `translateX(-${clickedBookmark.offsetWidth * clickedIndex}px)`;
    });
    
    // –ê–Ω–∏–º–∏—Ä—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—É—é –∑–∞–∫–ª–∞–¥–∫—É –≤–ª–µ–≤–æ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–≤–æ–π
    clickedBookmark.style.transition = `transform 0.4s ease ${bookmarksLeft.length * 0.05}s`;
    clickedBookmark.style.transform = `translateX(-${clickedBookmark.offsetWidth * clickedIndex}px)`;
    
    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º DOM –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏
    setTimeout(() => {
        // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º DOM –≤ –Ω–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ
        sidebar.innerHTML = '';
        newOrder.forEach(bookmark => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
            bookmark.style.transition = '';
            bookmark.style.transform = '';
            bookmark.style.opacity = '';
            sidebar.appendChild(bookmark);
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É
        sidebar.style.minWidth = '';
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–∫–ª–∞–¥–∫–µ
        clickedBookmark.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });
    }, 400 + Math.max(bookmarksLeft.length, bookmarksRight.length) * 50);
}

// --- Helpers ---
function showNotification(message, type='success') {
    if (!notificationElement) return;
    notificationElement.textContent = message;
    notificationElement.className = `notification ${type} show`;
    setTimeout(() => {
        notificationElement.classList.remove('show');
    }, 3500);
}

function escapeHTML(str) {
    if (str === undefined || str === null) return '';
    return String(str)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;');
}

function isSameOrigin(url) {
    try {
        const u = new URL(url, window.location.href);
        return u.origin === window.location.origin;
    } catch (e) {
        return false;
    }
}

// --- Load words ---
async function loadWords() {
    if (!currentUserId) {
        showNotification('user_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω', 'error');
        return;
    }

    console.info('loadWords: user_id=', currentUserId);
    if (wordsLoading) wordsLoading.style.display = 'flex';
    if (wordsListElement) wordsListElement.innerHTML = '';

    const url = `${API_BASE_URL}/api/words?user_id=${encodeURIComponent(currentUserId)}&_=${Date.now()}`;
    try {
        const response = await fetch(url, {
            headers: { 'Accept': 'application/json' },
            // include credentials only if same origin
            credentials: isSameOrigin(API_BASE_URL) ? 'include' : 'omit'
        });

        console.info('loadWords: status', response.status);
        const text = await response.text();
        if (!response.ok) {
            console.error('loadWords: server responded with error', response.status, text);
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (${response.status})`);
        }

        let data;
        try { data = JSON.parse(text); } catch (e) { throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞'); }

        console.debug('loadWords: data', data);
        const words = Array.isArray(data) ? data : [];

        if (!wordsListElement) {
            console.warn('loadWords: element with id="wordsList" not found in DOM');
            return;
        }

        if (words.length === 0) {
            wordsListElement.innerHTML = '<tr><td colspan="4" style="text-align:center; padding:30px;">–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞!</td></tr>';
            return;
        }

        // build rows
        const fragment = document.createDocumentFragment();
        words.forEach(item => {
            const id = item?.id ?? '';
            const w = item?.word ?? '';
            const pos = item?.part_of_speech ?? '';
            const trn = item?.translation ?? '';

            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${escapeHTML(w)}</td>
                <td>${escapeHTML(getPartOfSpeechName(pos))}</td>
                <td>${escapeHTML(trn)}</td>
                <td class="actions">
                    <button class="delete-btn" data-id="${escapeHTML(String(id))}">
                        <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                    </button>
                </td>
            `;
            fragment.appendChild(row);
        });

        wordsListElement.appendChild(fragment);

    } catch (err) {
        console.error('loadWords error:', err);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.', 'error');
    } finally {
        if (wordsLoading) wordsLoading.style.display = 'none';
    }
}

// --- Load statistics ---
async function loadStatistics() {
    if (!currentUserId) return;
    const statsContent = document.getElementById('statsContent');
    if (!statsContent) return;

    const url = `${API_BASE_URL}/api/stats?user_id=${encodeURIComponent(currentUserId)}&_=${Date.now()}`;
    try {
        const response = await fetch(url, { headers: { 'Accept': 'application/json' }, credentials: isSameOrigin(API_BASE_URL) ? 'include' : 'omit' });
        if (!response.ok) {
            const txt = await response.text().catch(()=>'');
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status} ${txt}`);
        }
        const stats = await response.json();
        statsContent.innerHTML = `
            <div style="display:flex; gap:20px; justify-content:center; flex-wrap:wrap; margin-top:20px;">
                <div style="background:#e8f5e9; padding:15px; border-radius:10px; min-width:120px;">
                    <div style="font-size:2rem; color:#2e7d32; font-weight:bold;">${escapeHTML(String(stats.total_words ?? 0))}</div>
                    <div>–í—Å–µ–≥–æ —Å–ª–æ–≤</div>
                </div>
                <div style="background:#e8f5e9; padding:15px; border-radius:10px; min-width:120px;">
                    <div style="font-size:2rem; color:#2e7d32; font-weight:bold;">${escapeHTML(String(stats.nouns ?? 0))}</div>
                    <div>–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö</div>
                </div>
                <div style="background:#e8f5e9; padding:15px; border-radius:10px; min-width:120px;">
                    <div style="font-size:2rem; color:#2e7d32; font-weight:bold;">${escapeHTML(String(stats.verbs ?? 0))}</div>
                    <div>–ì–ª–∞–≥–æ–ª–æ–≤</div>
                </div>
            </div>
        `;
    } catch (err) {
        console.error('loadStatistics error:', err);
        statsContent.innerHTML = '<div style="color:red;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>';
    }
}

// --- Add word ---
async function addWord() {
    const wordInput = document.getElementById('newWord');
    const translationInput = document.getElementById('translation');
    const posEl = document.getElementById('partOfSpeech');
    if (!wordInput || !translationInput || !posEl) return;

    const word = wordInput.value.trim();
    const translation = translationInput.value.trim();
    const partOfSpeech = posEl.value;

    if (!word || !translation) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }

    if (!currentUserId) {
        showNotification('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω user_id', 'error');
        return;
    }

    const payload = { user_id: currentUserId, word: word.toLowerCase(), part_of_speech: partOfSpeech, translation };
    const url = `${API_BASE_URL}/api/words`;

    try {
        if (loadingOverlay) loadingOverlay.style.display = 'flex';
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: JSON.stringify(payload),
            credentials: isSameOrigin(API_BASE_URL) ? 'include' : 'omit'
        });

        const text = await response.text().catch(()=>null);
        if (!response.ok) {
            console.error('addWord bad response', response.status, text);
            let msg = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (${response.status})`;
            try {
                const json = text ? JSON.parse(text) : null;
                if (json && (json.error || json.message)) msg = json.error || json.message;
            } catch (e) { if (text) msg = text; }
            throw new Error(msg);
        }

        // success
        wordInput.value = '';
        translationInput.value = '';
        showNotification(`–°–ª–æ–≤–æ "${escapeHTML(word)}" –¥–æ–±–∞–≤–ª–µ–Ω–æ!`, 'success');

        const activePage = document.querySelector('.page.active');
        if (activePage && activePage.id === 'all-words') await loadWords();
        if (document.getElementById('statistics')?.classList.contains('active')) await loadStatistics();

    } catch (err) {
        console.error('addWord error:', err);
        showNotification(`–û—à–∏–±–∫–∞: ${err.message || err}`, 'error');
    } finally {
        if (loadingOverlay) loadingOverlay.style.display = 'none';
    }
}

// --- Find translation ---
async function findTranslation() {
    const searchWordInput = document.getElementById('searchWord');
    if (!searchWordInput) return;

    const word = searchWordInput.value.trim();
    if (!word) { showNotification('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞', 'error'); return; }
    if (!currentUserId) { showNotification('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω user_id', 'error'); return; }

    const url = `${API_BASE_URL}/api/words/search?user_id=${encodeURIComponent(currentUserId)}&word=${encodeURIComponent(word)}`;
    try {
        if (loadingOverlay) loadingOverlay.style.display = 'flex';
        const response = await fetch(url, { headers: { 'Accept': 'application/json' }, credentials: isSameOrigin(API_BASE_URL) ? 'include' : 'omit' });

        const text = await response.text().catch(()=>null);
        if (!response.ok) {
            console.error('findTranslation bad response', response.status, text);
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        }

        const result = text ? JSON.parse(text) : null;
        const searchResult = document.getElementById('searchResult');
        if (!searchResult) return;

        if (result && result.word) {
            document.getElementById('resultWord').textContent = result.word;
            document.getElementById('resultPos').textContent = getPartOfSpeechName(result.part_of_speech);
            document.getElementById('resultTranslation').textContent = result.translation;
        } else {
            document.getElementById('resultWord').textContent = word;
            document.getElementById('resultPos').textContent = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
            document.getElementById('resultTranslation').textContent = '–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ';
        }
        searchResult.style.display = 'block';

    } catch (err) {
        console.error('findTranslation error:', err);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª–æ–≤–∞', 'error');
    } finally {
        if (loadingOverlay) loadingOverlay.style.display = 'none';
    }
}

// --- Delete word ---
async function deleteWord(wordId) {
    if (!wordId) { showNotification('–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID —Å–ª–æ–≤–∞', 'error'); return; }
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ?')) return;
    if (!currentUserId) { showNotification('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω user_id', 'error'); return; }

    const url = `${API_BASE_URL}/api/words/${encodeURIComponent(wordId)}?user_id=${encodeURIComponent(currentUserId)}`;
    try {
        if (loadingOverlay) loadingOverlay.style.display = 'flex';
        const response = await fetch(url, { method: 'DELETE', headers: { 'Accept': 'application/json' }, credentials: isSameOrigin(API_BASE_URL) ? 'include' : 'omit' });
        const text = await response.text().catch(()=>null);
        if (!response.ok) {
            console.error('deleteWord bad response', response.status, text);
            throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (${response.status})`);
        }
        showNotification('–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ', 'success');
        const activePage = document.querySelector('.page.active');
        if (activePage && activePage.id === 'all-words') await loadWords();
        if (document.getElementById('statistics')?.classList.contains('active')) await loadStatistics();
    } catch (err) {
        console.error('deleteWord error:', err);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞', 'error');
    } finally {
        if (loadingOverlay) loadingOverlay.style.display = 'none';
    }
}

// --- Utilities ---
function getPartOfSpeechName(code) {
    const names = {
        'noun': '–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ',
        'verb': '–ì–ª–∞–≥–æ–ª',
        'adjective': '–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ',
        'adverb': '–ù–∞—Ä–µ—á–∏–µ',
        'other': '–î—Ä—É–≥–æ–µ'
    };
    return names[code] || code || '';
}